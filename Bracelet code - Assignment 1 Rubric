def FibbonacciN(x,y,n=10):#implements fibbonacci mod n
    sequence = [x,y] #initialises our sequence
    pairs = [] #creates a list of all pairs in our sequence
    while sequence[-2:] not in pairs: #checks if the latest pair in our sequence has come up before, so we know when to stop our code as a bracelet would have formed.
        pairs.append(sequence[-2:]) 
        z = (x+y) % n #finds the next term of the sequence
        sequence.append(z) #adds the next term of the sequence
        x,y = y,z #creates new starting pair
    return sequence[:-2], len(sequence[:-2]) #output our sequence, and the length of the sequence if it ends
   
def normalised(bracelet,n=10):#normalise our bracelets to start from the same numbers
    #This function is to make sure we only count bracelets up to equivilence
    BestPair = n**2-1 #Setting an initial 'best pair' to compare sequences too, this is the largest number e.g 99
    for i in range(len(bracelet)):    
        NumberPair = n*bracelet[i]+ (bracelet[(i+1)%len(bracelet)]) #taking a pair in our bracelet and assigning it a value for comparison in this case, (3,6) would be assigned "36"
        if NumberPair < BestPair: # best pair will be determined by the smallest NumberPair
            BestPair = NumberPair
    return FibbonacciN(BestPair//n,BestPair % n,n)[0]     
   
def AllBracelets(n=10):#calculate the number of possible bracelets in Mod n
    bracelets=set() #creates a set of all bracelets
    for i in range(n): 
        for j in range(n):
            bracelets.add(tuple(normalised(FibbonacciN(i,j,n)[0],n))) #uses our normalised function to ensure we only add one bracelet for each equivilence
    return len(bracelets), bracelets #returns the number of bracelets mod N, and lists them.
